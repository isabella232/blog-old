<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: articles | Rollbar - Blog - real-time error tracking for Rails, Python, PHP, Javascript, and Flash]]></title>
  <link href="http://rollbar.com/blog/blog/categories/articles/atom.xml" rel="self"/>
  <link href="http://rollbar.com/blog/"/>
  <updated>2013-05-06T21:14:58-07:00</updated>
  <id>http://rollbar.com/blog/</id>
  <author>
    <name><![CDATA[Rollbar, Inc.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Taking UNIQUE indexes to the next level]]></title>
    <link href="http://rollbar.com/blog/post/2013/03/29/using-unique-indexes-for-fun-and-profit/"/>
    <updated>2013-03-29T09:15:00-07:00</updated>
    <id>http://rollbar.com/blog/post/2013/03/29/using-unique-indexes-for-fun-and-profit</id>
    <content type="html"><![CDATA[<p>You've probably seen unique constraints somewhere -- either in Rails' <a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html#uniqueness"><code>validates :uniqueness</code></a>, Django's <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#unique"><code>Field.unique</code></a>, or a raw SQL <a href="http://dev.mysql.com/doc/refman/5.5/en/create-index.html">table definition</a>. The basic function of unique constraints (preventing duplicate data from being inserted) is nice, but they're so much more powerful than that. When you write INSERT or REPLACE statements that rely on them, you can do some pretty cool (and efficient) things that you would've had to do multiple queries for otherwise.</p>

<p>This post covers unique indexes in MySQL 5.5. Other versions of MySQL are similar. I'm not sure about Postgres or other relational databases but presume they're similar-ish as well.</p>

<h2>Primer: what is a unique index?</h2>

<p>Pre-primer: data in a database is stored on disk somewhere. In a SQL database, the data is organized into tables which have rows and columns. An index is a way to look up particular rows, based on the values of one or more columns, without having to scan through the whole table. Instead, you look up those values in the index, which tells you where to find the matching rows.</p>

<p>Index lookups are typically faster than full table scans because they're organized for fast searches on the indexed columns (usually using binary trees), and they're also generally smaller than the original data.</p>

<p>A unique index is an index that also imposes a constraint: that no two entries in the index can have the same values. It can be comprised of one column or many columns. If many columns, then the entire tuple of columns is used for determining uniqueness. There can be other columns in the table that are not part of the index; these don't affect the constraint.</p>

<p>Primary keys are a special case of unique index; we'll cover this in more detail later.</p>

<p>Unique indexes can be created in a CREATE TABLE statement like this 123123:</p>

<p><code>sql
CREATE TABLE user (
  username varchar(32),
  password char(32),
  unique (username)
);
</code></p>

<p>or using an ALTER TABLE statement like this:</p>

<p><code>sql
ALTER TABLE users ADD unique (username);
</code></p>

<h2>What does a unique constraint affect?</h2>

<p>A unique constraint prevents you from changing your data in a way that would result in having duplicate data in the index. For example, given the above 'user' table, the following will happen if we try to insert duplicate data:</p>

<p>```
mysql> INSERT INTO user VALUES ('brian', PASSWORD('asdf'));
Query OK, 1 row affected, 1 warning (0.04 sec)</p>

<p>mysql> INSERT INTO user VALUES ('brian', PASSWORD('asdfjkl'));
ERROR 1062 (23000): Duplicate entry 'brian' for key 'username'
```</p>

<p>or if we try to get duplicate data with an update:</p>

<p>```
mysql> INSERT INTO user VALUES('sherlock', PASSWORD('123456'));
Query OK, 1 row affected, 1 warning (0.00 sec)</p>

<p>mysql> UPDATE user SET username = 'brian' WHERE username = 'sherlock';
ERROR 1062 (23000): Duplicate entry 'brian' for key 'username'
```</p>

<p>So we can see that unique indexes are a great way to maintain consistency of our data at the database level. If two people try to sign up with the same username, for example, the database will reject it and return a duplicate key error.</p>

<h2>Taking it to the next level</h2>

<p>MySQL provides several commands, all variations of INSERT, that can take advantage of unique indexes by specifying what to do (instead of erroring) when the insert would result in a duplicate. These are best illustrated by example.</p>

<h3>INSERT ... ON DUPLICATE KEY UPDATE</h3>

<p>Let's say we're building a simple ad impression tracking system. Ads are served by web servers and the impression counts are tracked in a database. We just want to know the number of ad impressions each hour. So we make a table like this:</p>

<p><code>
CREATE TABLE hour_impression (
  hour int unsigned not null,  -- number of hours since unix epoch
  impressions int unsigned not null default 0,
  primary key(hour)
);
</code></p>

<p>Side note: here we're using <code>hour</code> as the primary key, rather than having an auto-increment primary key like before in the 'user' table. This guarantees that <code>hour</code> is unique (since primary keys are a subset of unique keys), and has a nice property of laying out the data on disk in hour-order.</p>

<p>A naive algorithm for recording each impression would be to:</p>

<ol>
<li>Check if a row already exists for the hour</li>
<li>If not: <code>INSERT INTO hour_impression (hour, impressions) VALUES (:hour, 1)</code></li>
<li>If so: <code>UPDATE hour_impression SET impressions = impressions + 1 WHERE hour = :hour</code></li>
</ol>


<p>But this exposes a race condition: what happens if two impressions happen at approximately the same time, on two different web servers? It's possible that both will try to INSERT, and the second one is going to fail (because of the unique constraint).</p>

<p>What we want to do is combine the above algorithm into a single step. This is what INSERT … ON DUPLICATE KEY UPDATE is for:</p>

<p><code>
INSERT INTO hour_impression (hour, impressions)
VALUES (379015, 1)
ON DUPLICATE KEY UPDATE impressions = impressions + 1
</code></p>

<p>Now that it's a single step, we can run as many of these statements in parallel as we want, and the database will take care of the concurrency issues for us. Sweet!</p>

<h3>INSERT IGNORE</h3>

<p>Now let's say instead of counting the number of impressions in each hour, we just want to know which minutes any impressions at all were shown. So we create a table like this:</p>

<p><code>
CREATE TABLE minute_impression (
  minute int unsigned not null,  -- number of minutes since the unix epoch
  primary key (minute)
);
</code></p>

<p>Similar to before, a naive algorithm for recording which minutes had any impressions would be to:</p>

<ol>
<li>Check if a row already exists for the minute</li>
<li>If so, do nothing</li>
<li>If not, <code>INSERT INTO minute_impression (minute) VALUES (:minute)</code></li>
</ol>


<p>This has the same kind of race condition as in the previous example. INSERT IGNORE exists to combine all of this into a single step:</p>

<p><code>
INSERT IGNORE INTO minute_impression (minute) VALUES (22740922)
</code></p>

<p>And as before, now we can run as many of these in parallel as we want and let the database take care of the concurrency.</p>

<h2>More tricks</h2>

<h3>REPLACE</h3>

<p>The opposite of INSERT IGNORE. Overwrites matching rows with the new data instead of discarding it.</p>

<h3>Nullable unique indexes</h3>

<p>Values in a unique index have to be unique, but there's an exception: NULLs don't count. For example, let's say you let people pick their username after signup. You might have table like:</p>

<p><code>
CREATE TABLE user (
  id int unsigned not null auto_increment,
  username varchar(32) default null,
  unique (username),
  primary key (id)
);
</code></p>

<p>You can have as many users as you like who haven't chosen a username (it'll be NULL) while still preventing multiple users from having the same username.</p>

<h3>VALUES() in the ON DUPLICATE KEY UPDATE clause</h3>

<p>You can insert multiple rows in a single INSERT … ON DUPLICATE KEY UPDATE statement, and the UPDATE rule will apply for each row that would've been a duplicate. In some cases you'll want the update statement to reflect the values of each particular row, and that's not possible to do by hardcoding them in the statement.</p>

<p>For example, let's return to the ad impression tracking problem from before, with this hour_impression table:</p>

<p><code>
CREATE TABLE hour_impression (
  hour int unsigned not null,  -- number of hours since unix epoch
  impressions int unsigned not null default 0,
  primary key(hour)
);
</code></p>

<p>But now instead of recording impressions one at a time, we're batching them so that each INSERT increments <code>impressions</code> by a value 1 or higher. If we insert one of these batches at a time, we can do:</p>

<p><code>
INSERT INTO hour_impression (hour, impressions)
VALUES (379015, 23)  -- 23 impressions during 12am 3/28/2013
ON DUPLICATE KEY UPDATE
impressions = impressions + 23
</code></p>

<p>If we want to insert multiple rows in the same statement, there's a problem -- the amount in the UPDATE clause is hardcoded. We can fix this using VALUES() to reference the value from the would-have-been-inserted row:</p>

<p><code>
INSERT INTO hour_impression (hour, impressions)
VALUES (379015, 23), (379015, 55)
ON DUPLICATE KEY UPDATE
impressions = impressions + VALUES(impressions)
</code></p>

<h2>Conclusion</h2>

<p>Unique indexes are useful when used alone and become incredibly powerful when used in combination with INSERT ... ON DUPLICATE KEY UPDATE and its variants. We make heavy use of this at <a href="https://rollbar.com">Rollbar</a> and it works great.</p>

<p>Questions? Corrections? Let me know in the comments.</p>

<h3>References</h3>

<ol>
<li><a href="http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html">INSERT ... ON DUPLICATE KEY UPDATE syntax</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.0/en/insert.html">INSERT IGNORE syntax</a> (ctrl+f on the page)</li>
<li><a href="http://dev.mysql.com/doc/refman/5.0/en/replace.html">REPLACE syntax</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using a Request Factory in Pyramid to write a little less code]]></title>
    <link href="http://rollbar.com/blog/post/2012/09/07/using-pyramid-request-factory-to-write-less-code/"/>
    <updated>2012-09-07T11:00:00-07:00</updated>
    <id>http://rollbar.com/blog/post/2012/09/07/using-pyramid-request-factory-to-write-less-code</id>
    <content type="html"><![CDATA[<p>At <a href="http://rollbar.com/">Rollbar.com</a>, we've been using <a href="http://www.pylonsproject.org/">Pyramid</a> as our web framework and have been pretty happy with it. It's lightweight and mostly stays out of our way.</p>

<p>Pyramid doesn't have a global request object that you can just import [1], so it makes you pass around <code>request</code> wherever you need it. That results in a lot of library code that looks like this:</p>

<p>```python</p>

<h1>lib/helpers.py</h1>

<p>def flash_success(request, body, title=''):</p>

<pre><code>request.session.flash({'body': body, 'title': title'})
</code></pre>

<p>```</p>

<p>and a lot of view code that looks like this:</p>

<p>```python</p>

<h1>views/auth.py</h1>

<p>@view_config(route_name='auth/login')
def login(request):</p>

<pre><code># (do the login...)
helpers.flash_success(request, "You're now logged in.")
# (redirect...)
</code></pre>

<p>```</p>

<p>That is, there ends up being a lot of function calls that pass <code>request</code> as their first argument. Wouldn't it be nicer if we could attach these functions as methods on <code>request</code> itself? That would save a few characters every time we call them, and let us stop thinking about whether <code>request</code> is the first or last argument. Pyramid facilitates this by letting us provide our own <a href="http://pyramid.readthedocs.org/en/latest/narr/hooks.html#changing-the-request-factory">Request Factory</a>:</p>

<p>```python
from pyramid.request import Request</p>

<p>class MyRequest(Request):</p>

<pre><code>def hello(self):
    print "hello!"
</code></pre>

<p>def main(global_config, **settings):</p>

<pre><code>config = Configurator(settings=settings, request_factory=MyRequest)
# ...
</code></pre>

<p>```</p>

<p>Now the <code>request</code> passed to our view methods, and everwhere else in our app, has our <code>hello</code> method.</p>

<p>So, what can we do with this that's actually useful? In our codebase, we have a few convenience methods to get data about the logged-in user, flash messages, and check if features are enabled.</p>

<p>Here it is, unedited, in its entirety:</p>

<p>```
class MoxRequest(pyramid.request.Request):</p>

<pre><code># logged-in-user access
@util.CachedAttribute
def user_id(self):
    from pyramid.security import authenticated_userid
    user_id = authenticated_userid(self)
    log.debug('authenticated user id: %r', user_id)
    return user_id

@util.CachedAttribute
def user(self):
    user_id = self.user_id
    if user_id:
        return model.User.get(user_id)
    return None

@util.CachedAttribute
def username(self):
    if self.user:
        return self.user.username
    else:
        return None

def gater_check(self, feature_name):
    return self.registry.settings.get('gater.%s' % feature_name) == 'on'

# flash methods
def flash_success(self, body, title=''):
    self._flash_message(body, title=title, queue='success')

def flash_info(self, body, title=''):
    self._flash_message(body, title=title, queue='info')

def flash_warning(self, body, title=''):
    self._flash_message(body, title=title, queue='warning')

def flash_error(self, body, title=''):
    self._flash_message(body, title=title, queue='error')

def _flash_message(self, body, title='', queue=''):
    self.session.flash({'title': title, 'body': body}, queue=queue)
</code></pre>

<p>```</p>

<p>This just sits in our top-level <code>__init__.py</code>, along with the <code>main()</code> entry point.</p>

<p>Notes: <code>@util.CachedAttribute</code> contains <a href="http://code.activestate.com/recipes/276643-caching-and-aliasing-with-descriptors/">this recipe</a>. "Mox" is an easy-to-type codename, named after <a href="http://www.summitpost.org/mox-peaks-from-red-face-mountain/690027">these mountains</a>.</p>

<p>[1] I'm still not sold on this, but I'm getting by. It arguably causes problems with testing and such, but it <em>is</em> pretty nice to magically <code>from flask import request</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a simple deploy script with Fabric and @roles]]></title>
    <link href="http://rollbar.com/blog/post/2012/08/16/writing-a-simple-deploy-script-with-fabric-and-roles/"/>
    <updated>2012-08-16T11:52:00-07:00</updated>
    <id>http://rollbar.com/blog/post/2012/08/16/writing-a-simple-deploy-script-with-fabric-and-roles</id>
    <content type="html"><![CDATA[<p>I first heard about <a href="http://www.fabfile.org">Fabric</a> a couple years ago while at Lolapps and liked the idea of:</p>

<ul style="margin-left:40px;">
  <li>writing deployment and sysadmin scripts in a language other than Bash</li>
  <li>that language being Python, which we used everywhere else</li>
</ul>


<p>but we already had a huge swath of shell scripts that worked well (and truth be told, Bash isn’t really that bad). But now that we have at clean slate for <a href="https://rollbar.com">Rollbar</a>, Fabric it is.</p>

<p>I wanted a simple deployment script that would do the following:</p>

<ol style="margin-left:40px;">
  <li>check to make sure it’s running as the user "deploy" (since that's the user that has ssh keys set up and owns the code on the remote machines)</li>
  <li>for each webserver:
    <ol style="list-style:lower-alpha;margin-left:20px;">
      <li>git pull</li>
      <li>pip install -r requirements.txt</li>
      <li>in series, restart each web process</li>
    </ol>
  </li>
  <li>make an HTTP POST to our <a href="https://rollbar.com/docs/deploys/">deploys api</a> to record that the deploy completed successfully</li>
</ol>


<p>Here’s my first attempt:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (fabfile1.py)</span> <a href='/downloads/code/fabfile1.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">run</span><span class="p">,</span> <span class="n">local</span><span class="p">,</span> <span class="n">cd</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">roles</span><span class="p">,</span> <span class="n">execute</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span><span class="o">.</span><span class="n">hosts</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;web1&#39;</span><span class="p">,</span> <span class="s">&#39;web2&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">deploy</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># pre-roll checks</span>
</span><span class='line'>    <span class="n">check_user</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># do the roll.</span>
</span><span class='line'>    <span class="n">update_and_restart</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># post-roll tasks</span>
</span><span class='line'>    <span class="n">rollbar_record_deploy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">update_and_restart</span><span class="p">():</span>
</span><span class='line'>    <span class="n">code_dir</span> <span class="o">=</span> <span class="s">&#39;/home/deploy/www/mox&#39;</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">cd</span><span class="p">(</span><span class="n">code_dir</span><span class="p">):</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;git pull&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;pip install -r requirements.txt&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;supervisorctl restart web1&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;supervisorctl restart web2&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">check_user</span><span class="p">():</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;whoami&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&#39;deploy&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;This command should be run as deploy. Run like: sudo -u deploy fab deploy&quot;</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">rollbar_record_deploy</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># read access_token from production.ini</span>
</span><span class='line'>    <span class="n">access_token</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&quot;grep &#39;rollbar.access_token&#39; production.ini | sed &#39;s/^.* = //g&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">environment</span> <span class="o">=</span> <span class="s">&#39;production&#39;</span>
</span><span class='line'>    <span class="n">local_username</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;whoami&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">revision</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;git log -n 1 --pretty=format:&quot;%H&quot;&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;https://api.rollbar.com/api/1/deploy/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;access_token&#39;</span><span class="p">:</span> <span class="n">access_token</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;environment&#39;</span><span class="p">:</span> <span class="n">environment</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;local_username&#39;</span><span class="p">:</span> <span class="n">local_username</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;revision&#39;</span><span class="p">:</span> <span class="n">revision</span>
</span><span class='line'>    <span class="p">},</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Deploy recorded successfully&quot;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Error recording deploy:&quot;</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">text</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Looks close-ish, right? It knows which hosts to deploy to, checks that it’s running as deploy, updates and restarts each host, and records the deploy. Here’s the output:</p>

<p>```
$ sudo -u deploy fab deploy
(env-mox)[brian@dev mox]$ sudo -u deploy fab deploy
[sudo] password for brian:
[web1] Executing task 'deploy'
[localhost] local: whoami
[web1] run: git pull
[web1] out: remote: Counting objects: 8, done.
[web1] out: remote: Compressing objects: 100% (4/4), done.
[web1] out: remote: Total 6 (delta 4), reused 4 (delta 2)
[web1] out: Unpacking objects: 100% (6/6), done.
[web1] out: From github.com:brianr/mox
[web1] out:    c731b57..1d365e0  master     -> origin/master
[web1] out: Updating c731b57..1d365e0
[web1] out: Fast-forward
[web1] out:  fabfile.py |    8 ++++----
[web1] out:  1 file changed, 4 insertions(+), 4 deletions(-)</p>

<p>[web1] run: pip install -r requirements.txt
[web1] out: Requirement already satisfied (use --upgrade to upgrade): Beaker==1.6.3 in /home/deploy/env-mox/lib/python2.7/site-packages (from -r requirements.txt (line 1))
<snip>
[web1] out: Cleaning up...</p>

<p>[web1] run: supervisorctl restart web1
[web1] out: web1: stopped
[web1] out: web1: started</p>

<p>[web1] run: supervisorctl restart web2
[web1] out: web2: stopped
[web1] out: web2: started</p>

<p>[localhost] local: grep 'rollbar.access_token' production.ini | sed 's/<sup>.*</sup> = //g'
[localhost] local: whoami
[localhost] local: git log -n 1 --pretty=format:"%H"
Deploy recorded successfully. Deploy id: 307
[web2] Executing task 'deploy'
[localhost] local: whoami
[web2] run: git pull
[web2] out: remote: Counting objects: 8, done.
[web2] out: remote: Compressing objects: 100% (4/4), done.
[web2] out: remote: Total 6 (delta 4), reused 4 (delta 2)
[web2] out: Unpacking objects: 100% (6/6), done.
[web2] out: From github.com:brianr/mox
[web2] out:    c731b57..1d365e0  master     -> origin/master
[web2] out: Updating c731b57..1d365e0
[web2] out: Fast-forward
[web2] out:  fabfile.py |    8 ++++----
[web2] out:  1 file changed, 4 insertions(+), 4 deletions(-)</p>

<p>[web2] run: pip install -r requirements.txt
[web2] out: Requirement already satisfied (use --upgrade to upgrade): Beaker==1.6.3 in /home/deploy/env-mox/lib/python2.7/site-packages (from -r requirements.txt (line 1))</p>

<p>[web2] out: Cleaning up...</p>

<p>[web2] run: supervisorctl restart web1
[web2] out: web1: stopped
[web2] out: web1: started</p>

<p>[web2] run: supervisorctl restart web2
[web2] out: web2: stopped
[web2] out: web2: started</p>

<p>[localhost] local: grep 'rollbar.access_token' production.ini | sed 's/<sup>.*</sup> = //g'
[localhost] local: whoami
[localhost] local: git log -n 1 --pretty=format:"%H"
Deploy recorded successfully. Deploy id: 308</p>

<p>Done.
Disconnecting from web2... done.
Disconnecting from web1... done.
```</p>

<p>Lots of good things happening. But it's doing the whole process -- <code>check_user</code>, <code>update_and_restart</code>, <code>rollbar_record_deploy</code> -- twice, once for each host. The duplicate <code>check_user</code> just slows things down, but the duplicate <code>rollbar_record_deploy</code> is going to mess with our deploy history, and it's only going to get worse as we add more servers.</p>

<p>Fabric's solution to this, described in their <a href="http://docs.fabfile.org/en/1.4.3/usage/execution.html">docs</a>, is "roles". We can map hosts to roles, then decorate tasks with which roles they apply to. Here we replace the <code>env.hosts</code> declaration with <code>env.roledefs</code>, decorate <code>update_and_restart</code> with <code>@roles</code>, and call <code>update_and_restart</code> with <code>execute</code> so that the <code>@roles</code> decorator is honored:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (fabfile2.py)</span> <a href='/downloads/code/fabfile2.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">run</span><span class="p">,</span> <span class="n">local</span><span class="p">,</span> <span class="n">cd</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">roles</span><span class="p">,</span> <span class="n">execute</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span><span class="o">.</span><span class="n">roledefs</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;web&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;web1&#39;</span><span class="p">,</span> <span class="s">&#39;web2&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">deploy</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># pre-roll checks</span>
</span><span class='line'>    <span class="n">check_user</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># do the roll.</span>
</span><span class='line'>    <span class="c"># execute() will call the passed-in function, honoring host/role decorators.</span>
</span><span class='line'>    <span class="n">execute</span><span class="p">(</span><span class="n">update_and_restart</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># post-roll tasks</span>
</span><span class='line'>    <span class="n">rollbar_record_deploy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@roles</span><span class="p">(</span><span class="s">&#39;web&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">update_and_restart</span><span class="p">():</span>
</span><span class='line'>    <span class="n">code_dir</span> <span class="o">=</span> <span class="s">&#39;/home/deploy/www/mox&#39;</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">cd</span><span class="p">(</span><span class="n">code_dir</span><span class="p">):</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;git pull&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;pip install -r requirements.txt&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;supervisorctl restart web1&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;supervisorctl restart web2&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">check_user</span><span class="p">():</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;whoami&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&#39;deploy&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;This command should be run as deploy. Run like: sudo -u deploy fab deploy&quot;</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">rollbar_record_deploy</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># read access_token from production.ini</span>
</span><span class='line'>    <span class="n">access_token</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&quot;grep &#39;rollbar.access_token&#39; production.ini | sed &#39;s/^.* = //g&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">environment</span> <span class="o">=</span> <span class="s">&#39;production&#39;</span>
</span><span class='line'>    <span class="n">local_username</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;whoami&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">revision</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;git log -n 1 --pretty=format:&quot;%H&quot;&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;https://api.rollbar.com/api/1/deploy/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;access_token&#39;</span><span class="p">:</span> <span class="n">access_token</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;environment&#39;</span><span class="p">:</span> <span class="n">environment</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;local_username&#39;</span><span class="p">:</span> <span class="n">local_username</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;revision&#39;</span><span class="p">:</span> <span class="n">revision</span>
</span><span class='line'>    <span class="p">},</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Deploy recorded successfully&quot;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Error recording deploy:&quot;</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">text</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here's the output:</p>

<p>```
(env-mox)[brian@dev mox]$ sudo -u deploy fab deploy
[sudo] password for brian:
[localhost] local: whoami
[web1] Executing task 'update_and_restart'
[web1] run: git pull
[web1] out: Already up-to-date.</p>

<p>[web1] run: pip install -r requirements.txt
[web1] out: Requirement already satisfied (use --upgrade to upgrade): Beaker==1.6.3 in /home/deploy/env-mox/lib/python2.7/site-packages (from -r requirements.txt (line 1))
<snip>
[web1] out: Cleaning up...</p>

<p>[web1] run: supervisorctl restart web1
[web1] out: web1: stopped
[web1] out: web1: started</p>

<p>[web1] run: supervisorctl restart web2
[web1] out: web2: stopped
[web1] out: web2: started</p>

<p>[web2] Executing task 'update_and_restart'
[web2] run: git pull
[web2] out: Already up-to-date.</p>

<p>[web2] run: pip install -r requirements.txt
[web2] out: Requirement already satisfied (use --upgrade to upgrade): Beaker==1.6.3 in /home/deploy/env-mox/lib/python2.7/site-packages (from -r requirements.txt (line 1))</p>

<p>[web2] out: Cleaning up...</p>

<p>[web2] run: supervisorctl restart web1
[web2] out: web1: stopped
[web2] out: web1: started</p>

<p>[web2] run: supervisorctl restart web2
[web2] out: web2: stopped
[web2] out: web2: started</p>

<p>[localhost] local: grep 'rollbar.access_token' production.ini | sed 's/<sup>.*</sup> = //g'
[localhost] local: whoami
[localhost] local: git log -n 1 --pretty=format:"%H"
Deploy recorded successfully. Deploy id: 309</p>

<p>Done.
Disconnecting from web2... done.
Disconnecting from web1... done.
```</p>

<p>That's more like it. Since <code>env.hosts</code> is not set, the undecorated tasks just run locally (and only once), and the <code>@roles('web')</code>-decorated task runs for each web host.</p>
]]></content>
  </entry>
  
</feed>
