<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rollbar - Blog - real-time error monitoring]]></title>
  <link href="http://rollbar.com/blog/atom.xml" rel="self"/>
  <link href="http://rollbar.com/blog/"/>
  <updated>2013-02-25T01:54:23-08:00</updated>
  <id>http://rollbar.com/blog/</id>
  <author>
    <name><![CDATA[Rollbar, Inc.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Post-mortem from last night's outage]]></title>
    <link href="http://rollbar.com/blog/post/2013/01/11/post-mortem-from-last-nights-outage/"/>
    <updated>2013-01-11T15:57:00-08:00</updated>
    <id>http://rollbar.com/blog/post/2013/01/11/post-mortem-from-last-nights-outage</id>
    <content type="html"><![CDATA[<blockquote><p><em>Tl;dr: from about 9:30pm to 12:30am last night, our website was unreachable and we weren&#8217;t sending out any notifications. Our API stayed up nearly the whole time thanks to an automatic failover.</em></p></blockquote>

<p>We had our first major outage last night. We want to apologize to all of our customers for this outage, and we&#8217;re going to continue to work to make the <a href="http://rollbar.com">Rollbar.com</a> service stable, reliable, and performant.</p>

<p>What follows is a timeline of events, and a summary of what went wrong, what went right, and what we&#8217;re doing to address what went wrong.</p>

<h2>Background</h2>

<p>First some background: our infrastructure is currently hosted at Softlayer and layed out like this (simplified):</p>

<p><img src="https://d2tf6sbdgil6xr.cloudfront.net/static/img/blog/infrastructurediagram.png"></p>

<p>That is:</p>

<ul>
<li>our primary cluster of servers is in San Jose</li>
<li>all web traffic (rollbar.com / www.rollbar.com) is handled by lb2</li>
<li>all API traffic (api.rollbar.com) is handled by lb1</li>
<li>lb3 (in Singapore) and lb4 (Amsterdam) are ready to go but not in use yet (more on this below), providing failover and faster API response times to customers outside of the Americas.</li>
</ul>


<p>We&#8217;ve been in the process of setting up lb3 and lb4, along with some <a href="http://dyn.com/dns/dynect-managed-dns/">fancy DNS functionality</a> from Dyn, to provide redundancy and faster response times to our customers outside of the Americas. Each is running a stripped-down version of our infrastructure, including:</p>

<ul>
<li>a frontend web server (nginx)</li>
<li>two instsances of our node.js API server</li>
<li>a partial database slave (for validating access tokens)</li>
<li>our offline loading process (soon to be open-sourced!), for doing async writes to the active master database.</li>
</ul>


<p>Switching DNS to Dyn requires changing the nameservers, which can take &#8220;up to 48 hours&#8221;. At the start of this story, it&#8217;s been about 36 hours. To play it safe, after testing out Dyn on a separate domain, we configured it to have the same settings as we had before &#8211; lb3 and lb4 are not in play yet.</p>

<h2>Timeline</h2>

<p>Now the (abbreviated) timeline. All times are PST.</p>

<div style="padding-left:2em;">
<p>9:30pm: Cory got an alert from Pingdom that our website (rollbar.com) was down. He tried visiting it but it wouldn&#8217;t load (just hung). Remembering the pending DNS change, he immediately checked DNS propagation and saw that rollbar.com was pointing at the wrong load balancer &#8211; lb1 (the API tier), not lb2.

<p>Cory and Sergei investigated. The A record for rollbar.com showed as correct in Dyn, but DNS was resolving incorrectly.

<p>9:47pm: Cory and Sergei looked at <a href="http://twitter.com/SoftlayerNotify" target="_blank">@SoftlayerNotify</a> and saw that there was an issue underway with one of the routers in the San Jose data center.

<p>9:49pm: Website accessible by its IP address.

<p>9:51pm: No longer accessible by IP.

<p>10:05pm: Twitter search for &#8220;softlayer outage&#8221; shows other people being affected.

<p>10:05pm: API tier (api.rollbar.com) appears to be working. Sergei verifies that it&#8217;s hitting lb3 (in Singapore).
</div>


<p>You might notice that we said before that lb3 wasn&#8217;t supposed to be in service yet. What appeared to have happened DNS had automatically failed over to lb3 (since lb1 was down because of the Softlayer outage). We had set something like this up before when testing out Dyn, but it wasn&#8217;t supposed to be active yet. Fortunately, lb3 was ready to go and handled all of our API load just fine.</p>

<div style="padding-left:2em;">
<p>10:22pm: Sergei tries fiddling with the Dyn configuration to see if anything helps.

<p>10:35pm: Sergei starts trying to get ahold Dyn

<p>10:58pm: Softlayer posts that &#8220;13 out of 14 rows of servers are online&#8221;. We must be in the 14th, because we&#8217;re still unreachable at this point. Brian tries hard-rebooting the &#8216;dev&#8217; server to see if it helps. It doesn&#8217;t.

<p>11:15pm: Sergei gets a call from Dyn, who tells him that the problem was a &#8220;stale Real-Time Traffic Manager configuration&#8221; and they&#8217;re looking into it.

<p>11:54pm: @SoftlayerNotify posts that &#8220;all servers are online however some intermittent problems remain&#8221;

<p>11:55pm: Sergei notices that the A record for rollbar.com in the Dyn interface appears to have been deleted, and he can&#8217;t add it back.

<p>12:00am: Brian sees that rollbar.com is working again. Cory notices that API calls are hitting lb2, causing them to hit the old, non-optimized API handling code on our web tier, overloading them and causing the website to hang. Frequent process restarts minimize the impact.

<p>12:19am: Sergei gets an email back from Dyn saying that they&#8217;re still looking into the problem.

<p>12:28am: Dyn calls to say they were able to fix everything. Sergei confirms. lb3 and lb4 are now fully utilized.

<p>12:42am: Brian tweets that all systems are stable.

<p>2:58am: Softlayer tweets that they&#8217;re about to run some code upgrades on the troubled router, which will cause some public network disruption.

<p>4:00am:- A customer reports connectivity issues to rollbar.com

<p>4:10am: Softlayer tweets that the troubled router is finally stable.
</div>


<h2>So what happened here?</h2>

<ol>
<li>Softlayer experienced a network outage, causing our servers in San Jose to be intermittently, then fully, unreachable</li>
<li>This triggered a DNS failover controlled by a stale Dyn configuration, which cascaded into a broken set of DNS records</li>
<li>After about 3 hours, our San Jose servers came back online, and about 30 minutes after that, the DNS issue was resolved.</li>
</ol>


<h2>What went right</h2>

<ul>
<li>We were notified of the problem by our backup monitoring service, Pingdom. (We&#8217;re using Nagios as our primary, but it runs inside of San Jose.)</li>
<li>Dyn&#8217;s DNS failover did work, even though wasn&#8217;t really supposed to be turned on. Our logs don&#8217;t show any large gaps in customer data being received.</li>
<li>A single machine (lb3) was able to handle all of our API traffic during the outage.</li>
<li>The API tier was able to handle a master-offline situation.</li>
<li>When San Jose came back online, data processing quickly caught up, notifications were sent, and the system was stable.</li>
<li>Our team came together, stayed mostly calm, and did everything we reasonably could to restore service as quickly as possible.</li>
</ul>


<p>As a bonus, our Singapore and Amsterdam servers are <a href="http://www.whatsmydns.net/#A/api.rollbar.com">now in service</a>.</p>

<h2>What went wrong</h2>

<ul>
<li>Parts of our service were unusable for a long period of time

<ul>
<li>Notifications for new errors, etc. weren&#8217;t sent</li>
<li>The web app didn&#8217;t load, and there was no maintenance page.</li>
<li><a href="http://status.rollbar.com">status.rollbar.com</a> didn&#8217;t show useful information</li>
</ul>
</li>
<li>Even though the Softlayer private network was at least partially accessible, we couldn&#8217;t access it because we only had one way in (&#8216;dev&#8217;, in San Jose).</li>
<li>The web tier got crushed trying to handle the API load with its old code.</li>
</ul>


<h2>Action items</h2>

<p>In the short term (most of this will get done today):</p>

<div style="padding-left:2em;">
<p><i>1b.</i> Set up a web server in a separate datacenter to serve a maintenance page.

<p><i>1c.</i> Add meta-level checks to status.rollbar.com. It currently gets data pushed from Nagios, but this isn&#8217;t helpful when San Jose is entirely unreachable.

<p><i>2.</i> Add another &#8216;dev&#8217;-like machine that we can use to administer servers, deploy code, etc. if San Jose is unreachable

<p><i>3.</i> Remove that old code, and make it an error if any API traffic hits the web tier.
</div>


<p>And longer term:</p>

<div style="padding-left:2em;">
<p><i>1a.</i> Add a host master standby in another datacenter for fast failover. If an episode like last night&#8217;s happens again, this will let us get notifications back online in a few minutes instead of a few hours.

<p><i>1b.</i> Set up a read-only web tier in another datacenter
</div>


<h2>Conclusion</h2>

<p>We hope this was, if nothing else, an interesting look into our infrastructure, and to the journey of building a highly-available we service.</p>

<p>If you have any questions about the outage or otherwise, let us know in the comments or email us at support@rollbar.com</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Halloween]]></title>
    <link href="http://rollbar.com/blog/post/2012/10/31/happy-halloween/"/>
    <updated>2012-10-31T12:40:00-07:00</updated>
    <id>http://rollbar.com/blog/post/2012/10/31/happy-halloween</id>
    <content type="html"><![CDATA[<h1>Y U No Use Rollbar?</h1>

<p><img src="https://d2tf6sbdgil6xr.cloudfront.net/static/img/blog/halloween-2012.jpg"></p>

<p>&#8211; Happy Halloween from <a href="http://rollbar.com/">Rollbar.com</a>!</p>

<p>If you don&#8217;t have an account yet, <a href="https://rollbar.com/">sign up here for early access</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real-time Search for Exceptions and Errors]]></title>
    <link href="http://rollbar.com/blog/post/2012/10/24/real-time-search-for-exceptions-and-errors/"/>
    <updated>2012-10-24T11:24:00-07:00</updated>
    <id>http://rollbar.com/blog/post/2012/10/24/real-time-search-for-exceptions-and-errors</id>
    <content type="html"><![CDATA[<p>We&#8217;re happy today to announce the release of real-time search. You can now search your exceptions, errors, and log messages by title:</p>

<p><img src="https://d2tf6sbdgil6xr.cloudfront.net/static/img/blog/realtimesearch1.png"></p>

<p>For exceptions, the title contains the exception class and message. For errors and log messages, it contains the entire message. It’s a full-text search that works best on whole words; we also do a few tricks with camelCase and underscore_separated terms.</p>

<p>The search index is kept up-to-date in real-time as new items are added to the system (that&#8217;s the &#8220;real-time&#8221; part). Typically the delay is ~2 seconds from receiving the input at our API to being in the index and searchable.</p>

<p>Current customers can try it out now; let us know if you run into any issues. What else would you like to see indexed?</p>

<p>If you don&#8217;t have an account yet, <a href="https://rollbar.com/">sign up here for early access</a>.</p>

<h2>Under the hood</h2>

<p>We&#8217;re using the new <a href="http://sphinxsearch.com/">Sphinx</a> realtime features for indexing and querying. It&#8217;s currently running on a single dedicated machine (1 core, 2GB ram, 100GB local disk).</p>

<p>New items are indexed by a long-running script that indexes new items as they are inserted. (It keeps track of its location in the table and polls every second for new rows.) The index includes two full-text <em>fields</em>, <code>title</code> and <code>environment</code>, and two scalar <em>attributes</em>, <code>status</code> and <code>level</code>.</p>

<p>Title and environment don&#8217;t change, so we don&#8217;t need to update them. But status (active/resolved) and level (critical/error/warning/info/debug) do. We keep these in sync by simply writing to the search server whenever we update the primary database and whenever we modify our tokenizing algorithm.</p>

<p>Queries are routed through our API server, which returns the paged list of matching item ids that we can then use to filter with on our primary database, (in case the search results are out of date) and fetch the other data necessary for the results page (last occurrence, etc.)</p>

<p>Although our setup is straightforward, there were a few gotchas and lessons learned.</p>

<h3>Infix queries</h3>

<p>Sphinx&#8217;s realtime index does not currently support infix queries. That means that if you’re searching for &#8220;Error&#8221; then exceptions with titles like &#8220;ReferenceError&#8221; or &#8220;not_found_error&#8221; or even &#8220;(Error)&#8221; would not be found. To get around this, we index both the original title as well as another set of tokens that we’ve determined are useful for the lookup.</p>

<p>e.g. &#8220;#462 UnicodeEncodeError: &#8216;latin-1&#8217; codec can&#8217;t encode character u&#8217;\u0441&#8217; in position 71: ordinal not in range(256)&#8221;</p>

<p>gets tokenized and becomes</p>

<p>&#8220;#462 UnicodeEncodeError: &#8216;latin-1&#8217; codec can&#8217;t encode character u&#8217;\u0441&#8217; in position 71: ordinal not in range(256) can’t u0441 71 256 Unicode Encode Error latin-1&#8217;&#8221;</p>

<p>By tacking on these extra tokens, we are able to support most of the relevant infix searches our users are likely to make.</p>

<h3>Sphinx + MySQL</h3>

<p>Sphinx search comes with a super-handy feature that lets you connect, add and query the search index using a vanilla MySQL protocol. This is great for debugging and testing but comes with some caveats.</p>

<p>There are a lot of operations that SphinxQL does not yet support. One of the major ones is the lack of support for &#8220;OR&#8221; where_conditions and another is lack of a &#8220;COUNT(*)&#8221; method.</p>

<p>Since our API server is written in node, we were able to use the <a href="https://github.com/felixge/node-mysql">node-mysql</a> library from Felix Geisendörfer. After plugging in the library, we noticed that the Sphinx server drops client connections fairly rigorously so we implemented a layer on top of the node-mysql library to handle reconnects, disconnects, etc&#8230; This has been great since it lets us perform maintenance on the Sphinx server without taking down our API server.</p>

<h3>REPLACE</h3>

<p>Lastly, we made sure that we were able to re-index our entire database into our Sphinx server by only using the REPLACE command when inserting new items. The docs mention that this can cause memory issues but since it&#8217;s so infrequent for our use-case, we haven&#8217;t run into any trouble and the benefit of re-indexing whenever we want more than makes up for it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using a Request Factory in Pyramid to write a little less code]]></title>
    <link href="http://rollbar.com/blog/post/2012/09/07/using-pyramid-request-factory-to-write-less-code/"/>
    <updated>2012-09-07T11:00:00-07:00</updated>
    <id>http://rollbar.com/blog/post/2012/09/07/using-pyramid-request-factory-to-write-less-code</id>
    <content type="html"><![CDATA[<p>At <a href="http://rollbar.com/">Rollbar.com</a>, we&#8217;ve been using <a href="http://www.pylonsproject.org/">Pyramid</a> as our web framework and have been pretty happy with it. It&#8217;s lightweight and mostly stays out of our way.</p>

<p>Pyramid doesn&#8217;t have a global request object that you can just import [1], so it makes you pass around <code>request</code> wherever you need it. That results in a lot of library code that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># lib/helpers.py</span>
</span><span class='line'><span class="k">def</span> <span class="nf">flash_success</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">flash</span><span class="p">({</span><span class="s">&#39;body&#39;</span><span class="p">:</span> <span class="n">body</span><span class="p">,</span> <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="n">title</span><span class="s">&#39;})</span>
</span></code></pre></td></tr></table></div></figure>


<p>and a lot of view code that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># views/auth.py</span>
</span><span class='line'><span class="nd">@view_config</span><span class="p">(</span><span class="n">route_name</span><span class="o">=</span><span class="s">&#39;auth/login&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># (do the login...)</span>
</span><span class='line'>    <span class="n">helpers</span><span class="o">.</span><span class="n">flash_success</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&quot;You&#39;re now logged in.&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># (redirect...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is, there ends up being a lot of function calls that pass <code>request</code> as their first argument. Wouldn&#8217;t it be nicer if we could attach these functions as methods on <code>request</code> itself? That would save a few characters every time we call them, and let us stop thinking about whether <code>request</code> is the first or last argument. Pyramid facilitates this by letting us provide our own <a href="http://pyramid.readthedocs.org/en/latest/narr/hooks.html#changing-the-request-factory">Request Factory</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pyramid.request</span> <span class="kn">import</span> <span class="n">Request</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyRequest</span><span class="p">(</span><span class="n">Request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;hello!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">global_config</span><span class="p">,</span> <span class="o">**</span><span class="n">settings</span><span class="p">):</span>
</span><span class='line'>    <span class="n">config</span> <span class="o">=</span> <span class="n">Configurator</span><span class="p">(</span><span class="n">settings</span><span class="o">=</span><span class="n">settings</span><span class="p">,</span> <span class="n">request_factory</span><span class="o">=</span><span class="n">MyRequest</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the <code>request</code> passed to our view methods, and everwhere else in our app, has our <code>hello</code> method.</p>

<p>So, what can we do with this that&#8217;s actually useful? In our codebase, we have a few convenience methods to get data about the logged-in user, flash messages, and check if features are enabled.</p>

<p>Here it is, unedited, in its entirety:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">MoxRequest</span><span class="p">(</span><span class="n">pyramid</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">Request</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># logged-in-user access</span>
</span><span class='line'>    <span class="nd">@util.CachedAttribute</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">user_id</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="kn">from</span> <span class="nn">pyramid.security</span> <span class="kn">import</span> <span class="n">authenticated_userid</span>
</span><span class='line'>        <span class="n">user_id</span> <span class="o">=</span> <span class="n">authenticated_userid</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&#39;authenticated user id: </span><span class="si">%r</span><span class="s">&#39;</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">user_id</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@util.CachedAttribute</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">user</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">user_id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">user_id</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">user_id</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">model</span><span class="o">.</span><span class="n">User</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@util.CachedAttribute</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">username</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">user</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">username</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">gater_check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">feature_name</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">registry</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;gater.</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">feature_name</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#39;on&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># flash methods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">flash_success</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_flash_message</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">,</span> <span class="n">queue</span><span class="o">=</span><span class="s">&#39;success&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">flash_info</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_flash_message</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">,</span> <span class="n">queue</span><span class="o">=</span><span class="s">&#39;info&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">flash_warning</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_flash_message</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">,</span> <span class="n">queue</span><span class="o">=</span><span class="s">&#39;warning&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">flash_error</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_flash_message</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">,</span> <span class="n">queue</span><span class="o">=</span><span class="s">&#39;error&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_flash_message</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">queue</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">flash</span><span class="p">({</span><span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span> <span class="s">&#39;body&#39;</span><span class="p">:</span> <span class="n">body</span><span class="p">},</span> <span class="n">queue</span><span class="o">=</span><span class="n">queue</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This just sits in our top-level <code>__init__.py</code>, along with the <code>main()</code> entry point.</p>

<p>Notes: <code>@util.CachedAttribute</code> contains <a href="http://code.activestate.com/recipes/276643-caching-and-aliasing-with-descriptors/">this recipe</a>. &#8220;Mox&#8221; is an easy-to-type codename, named after <a href="http://www.summitpost.org/mox-peaks-from-red-face-mountain/690027">these mountains</a>.</p>

<p>[1] I&#8217;m still not sold on this, but I&#8217;m getting by. It arguably causes problems with testing and such, but it <em>is</em> pretty nice to magically <code>from flask import request</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a simple deploy script with Fabric and @roles]]></title>
    <link href="http://rollbar.com/blog/post/2012/08/16/writing-a-simple-deploy-script-with-fabric-and-roles/"/>
    <updated>2012-08-16T11:52:00-07:00</updated>
    <id>http://rollbar.com/blog/post/2012/08/16/writing-a-simple-deploy-script-with-fabric-and-roles</id>
    <content type="html"><![CDATA[<p>I first heard about <a href="http://www.fabfile.org">Fabric</a> a couple years ago while at Lolapps and liked the idea of:</p>

<ul style="margin-left:40px;">
  <li>writing deployment and sysadmin scripts in a language other than Bash</li>
  <li>that language being Python, which we used everywhere else</li>
</ul>


<p>but we already had a huge swath of shell scripts that worked well (and truth be told, Bash isn’t really that bad). But now that we have at clean slate for <a href="https://rollbar.com">Rollbar</a>, Fabric it is.</p>

<p>I wanted a simple deployment script that would do the following:</p>

<ol style="margin-left:40px;">
  <li>check to make sure it’s running as the user &#8220;deploy&#8221; (since that&#8217;s the user that has ssh keys set up and owns the code on the remote machines)</li>
  <li>for each webserver:
    <ol style="list-style:lower-alpha;margin-left:20px;">
      <li>git pull</li>
      <li>pip install -r requirements.txt</li>
      <li>in series, restart each web process</li>
    </ol>
  </li>
  <li>make an HTTP POST to our <a href="https://rollbar.com/docs/deploys/">deploys api</a> to record that the deploy completed successfully</li>
</ol>


<p>Here’s my first attempt:</p>

<figure class='code'><figcaption><span> (fabfile1.py)</span> <a href='http://rollbar.com/blog/downloads/code/fabfile1.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">run</span><span class="p">,</span> <span class="n">local</span><span class="p">,</span> <span class="n">cd</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">roles</span><span class="p">,</span> <span class="n">execute</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span><span class="o">.</span><span class="n">hosts</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;web1&#39;</span><span class="p">,</span> <span class="s">&#39;web2&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">deploy</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># pre-roll checks</span>
</span><span class='line'>    <span class="n">check_user</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># do the roll.</span>
</span><span class='line'>    <span class="n">update_and_restart</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># post-roll tasks</span>
</span><span class='line'>    <span class="n">rollbar_record_deploy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">update_and_restart</span><span class="p">():</span>
</span><span class='line'>    <span class="n">code_dir</span> <span class="o">=</span> <span class="s">&#39;/home/deploy/www/mox&#39;</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">cd</span><span class="p">(</span><span class="n">code_dir</span><span class="p">):</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;git pull&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;pip install -r requirements.txt&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;supervisorctl restart web1&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;supervisorctl restart web2&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">check_user</span><span class="p">():</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;whoami&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&#39;deploy&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;This command should be run as deploy. Run like: sudo -u deploy fab deploy&quot;</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">rollbar_record_deploy</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># read access_token from production.ini</span>
</span><span class='line'>    <span class="n">access_token</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&quot;grep &#39;rollbar.access_token&#39; production.ini | sed &#39;s/^.* = //g&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">environment</span> <span class="o">=</span> <span class="s">&#39;production&#39;</span>
</span><span class='line'>    <span class="n">local_username</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;whoami&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">revision</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;git log -n 1 --pretty=format:&quot;%H&quot;&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;https://api.rollbar.com/api/1/deploy/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;access_token&#39;</span><span class="p">:</span> <span class="n">access_token</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;environment&#39;</span><span class="p">:</span> <span class="n">environment</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;local_username&#39;</span><span class="p">:</span> <span class="n">local_username</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;revision&#39;</span><span class="p">:</span> <span class="n">revision</span>
</span><span class='line'>    <span class="p">},</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Deploy recorded successfully&quot;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Error recording deploy:&quot;</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">text</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks close-ish, right? It knows which hosts to deploy to, checks that it’s running as deploy, updates and restarts each host, and records the deploy. Here’s the output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo -u deploy fab deploy
</span><span class='line'>(env-mox)[brian@dev mox]$ sudo -u deploy fab deploy
</span><span class='line'>[sudo] password for brian: 
</span><span class='line'>[web1] Executing task 'deploy'
</span><span class='line'>[localhost] local: whoami
</span><span class='line'>[web1] run: git pull
</span><span class='line'>[web1] out: remote: Counting objects: 8, done.
</span><span class='line'>[web1] out: remote: Compressing objects: 100% (4/4), done.
</span><span class='line'>[web1] out: remote: Total 6 (delta 4), reused 4 (delta 2)
</span><span class='line'>[web1] out: Unpacking objects: 100% (6/6), done.
</span><span class='line'>[web1] out: From github.com:brianr/mox
</span><span class='line'>[web1] out:    c731b57..1d365e0  master     -&gt; origin/master
</span><span class='line'>[web1] out: Updating c731b57..1d365e0
</span><span class='line'>[web1] out: Fast-forward
</span><span class='line'>[web1] out:  fabfile.py |    8 ++++----
</span><span class='line'>[web1] out:  1 file changed, 4 insertions(+), 4 deletions(-)
</span><span class='line'>
</span><span class='line'>[web1] run: pip install -r requirements.txt
</span><span class='line'>[web1] out: Requirement already satisfied (use --upgrade to upgrade): Beaker==1.6.3 in /home/deploy/env-mox/lib/python2.7/site-packages (from -r requirements.txt (line 1))
</span><span class='line'>&lt;snip&gt;
</span><span class='line'>[web1] out: Cleaning up...
</span><span class='line'>
</span><span class='line'>[web1] run: supervisorctl restart web1
</span><span class='line'>[web1] out: web1: stopped
</span><span class='line'>[web1] out: web1: started
</span><span class='line'>
</span><span class='line'>[web1] run: supervisorctl restart web2
</span><span class='line'>[web1] out: web2: stopped
</span><span class='line'>[web1] out: web2: started
</span><span class='line'>
</span><span class='line'>[localhost] local: grep 'rollbar.access_token' production.ini | sed 's/^.* = //g'
</span><span class='line'>[localhost] local: whoami
</span><span class='line'>[localhost] local: git log -n 1 --pretty=format:"%H"
</span><span class='line'>Deploy recorded successfully. Deploy id: 307
</span><span class='line'>[web2] Executing task 'deploy'
</span><span class='line'>[localhost] local: whoami
</span><span class='line'>[web2] run: git pull
</span><span class='line'>[web2] out: remote: Counting objects: 8, done.
</span><span class='line'>[web2] out: remote: Compressing objects: 100% (4/4), done.
</span><span class='line'>[web2] out: remote: Total 6 (delta 4), reused 4 (delta 2)
</span><span class='line'>[web2] out: Unpacking objects: 100% (6/6), done.
</span><span class='line'>[web2] out: From github.com:brianr/mox
</span><span class='line'>[web2] out:    c731b57..1d365e0  master     -&gt; origin/master
</span><span class='line'>[web2] out: Updating c731b57..1d365e0
</span><span class='line'>[web2] out: Fast-forward
</span><span class='line'>[web2] out:  fabfile.py |    8 ++++----
</span><span class='line'>[web2] out:  1 file changed, 4 insertions(+), 4 deletions(-)
</span><span class='line'>
</span><span class='line'>[web2] run: pip install -r requirements.txt
</span><span class='line'>[web2] out: Requirement already satisfied (use --upgrade to upgrade): Beaker==1.6.3 in /home/deploy/env-mox/lib/python2.7/site-packages (from -r requirements.txt (line 1))
</span><span class='line'>
</span><span class='line'>[web2] out: Cleaning up...
</span><span class='line'>
</span><span class='line'>[web2] run: supervisorctl restart web1
</span><span class='line'>[web2] out: web1: stopped
</span><span class='line'>[web2] out: web1: started
</span><span class='line'>
</span><span class='line'>[web2] run: supervisorctl restart web2
</span><span class='line'>[web2] out: web2: stopped
</span><span class='line'>[web2] out: web2: started
</span><span class='line'>
</span><span class='line'>[localhost] local: grep 'rollbar.access_token' production.ini | sed 's/^.* = //g'
</span><span class='line'>[localhost] local: whoami
</span><span class='line'>[localhost] local: git log -n 1 --pretty=format:"%H"
</span><span class='line'>Deploy recorded successfully. Deploy id: 308
</span><span class='line'>
</span><span class='line'>Done.
</span><span class='line'>Disconnecting from web2... done.
</span><span class='line'>Disconnecting from web1... done.</span></code></pre></td></tr></table></div></figure>


<p>Lots of good things happening. But it&#8217;s doing the whole process &#8211; <code>check_user</code>, <code>update_and_restart</code>, <code>rollbar_record_deploy</code> &#8211; twice, once for each host. The duplicate <code>check_user</code> just slows things down, but the duplicate <code>rollbar_record_deploy</code> is going to mess with our deploy history, and it&#8217;s only going to get worse as we add more servers.</p>

<p>Fabric&#8217;s solution to this, described in their <a href="http://docs.fabfile.org/en/1.4.3/usage/execution.html">docs</a>, is &#8220;roles&#8221;. We can map hosts to roles, then decorate tasks with which roles they apply to. Here we replace the <code>env.hosts</code> declaration with <code>env.roledefs</code>, decorate <code>update_and_restart</code> with <code>@roles</code>, and call <code>update_and_restart</code> with <code>execute</code> so that the <code>@roles</code> decorator is honored:</p>

<figure class='code'><figcaption><span> (fabfile2.py)</span> <a href='http://rollbar.com/blog/downloads/code/fabfile2.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">fabric.api</span> <span class="kn">import</span> <span class="n">run</span><span class="p">,</span> <span class="n">local</span><span class="p">,</span> <span class="n">cd</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">roles</span><span class="p">,</span> <span class="n">execute</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'>
</span><span class='line'><span class="n">env</span><span class="o">.</span><span class="n">roledefs</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;web&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;web1&#39;</span><span class="p">,</span> <span class="s">&#39;web2&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">deploy</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># pre-roll checks</span>
</span><span class='line'>    <span class="n">check_user</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># do the roll.</span>
</span><span class='line'>    <span class="c"># execute() will call the passed-in function, honoring host/role decorators.</span>
</span><span class='line'>    <span class="n">execute</span><span class="p">(</span><span class="n">update_and_restart</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># post-roll tasks</span>
</span><span class='line'>    <span class="n">rollbar_record_deploy</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@roles</span><span class="p">(</span><span class="s">&#39;web&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">update_and_restart</span><span class="p">():</span>
</span><span class='line'>    <span class="n">code_dir</span> <span class="o">=</span> <span class="s">&#39;/home/deploy/www/mox&#39;</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">cd</span><span class="p">(</span><span class="n">code_dir</span><span class="p">):</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;git pull&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;pip install -r requirements.txt&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;supervisorctl restart web1&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">run</span><span class="p">(</span><span class="s">&quot;supervisorctl restart web2&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">check_user</span><span class="p">():</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;whoami&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&#39;deploy&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;This command should be run as deploy. Run like: sudo -u deploy fab deploy&quot;</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">rollbar_record_deploy</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># read access_token from production.ini</span>
</span><span class='line'>    <span class="n">access_token</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&quot;grep &#39;rollbar.access_token&#39; production.ini | sed &#39;s/^.* = //g&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">environment</span> <span class="o">=</span> <span class="s">&#39;production&#39;</span>
</span><span class='line'>    <span class="n">local_username</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;whoami&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">revision</span> <span class="o">=</span> <span class="n">local</span><span class="p">(</span><span class="s">&#39;git log -n 1 --pretty=format:&quot;%H&quot;&#39;</span><span class="p">,</span> <span class="n">capture</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;https://api.rollbar.com/api/1/deploy/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;access_token&#39;</span><span class="p">:</span> <span class="n">access_token</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;environment&#39;</span><span class="p">:</span> <span class="n">environment</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;local_username&#39;</span><span class="p">:</span> <span class="n">local_username</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;revision&#39;</span><span class="p">:</span> <span class="n">revision</span>
</span><span class='line'>    <span class="p">},</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Deploy recorded successfully&quot;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Error recording deploy:&quot;</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">text</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s the output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(env-mox)[brian@dev mox]$ sudo -u deploy fab deploy
</span><span class='line'>[sudo] password for brian: 
</span><span class='line'>[localhost] local: whoami
</span><span class='line'>[web1] Executing task 'update_and_restart'
</span><span class='line'>[web1] run: git pull
</span><span class='line'>[web1] out: Already up-to-date.
</span><span class='line'>
</span><span class='line'>[web1] run: pip install -r requirements.txt
</span><span class='line'>[web1] out: Requirement already satisfied (use --upgrade to upgrade): Beaker==1.6.3 in /home/deploy/env-mox/lib/python2.7/site-packages (from -r requirements.txt (line 1))
</span><span class='line'>&lt;snip&gt;
</span><span class='line'>[web1] out: Cleaning up...
</span><span class='line'>
</span><span class='line'>[web1] run: supervisorctl restart web1
</span><span class='line'>[web1] out: web1: stopped
</span><span class='line'>[web1] out: web1: started
</span><span class='line'>
</span><span class='line'>[web1] run: supervisorctl restart web2
</span><span class='line'>[web1] out: web2: stopped
</span><span class='line'>[web1] out: web2: started
</span><span class='line'>
</span><span class='line'>[web2] Executing task 'update_and_restart'
</span><span class='line'>[web2] run: git pull
</span><span class='line'>[web2] out: Already up-to-date.
</span><span class='line'>
</span><span class='line'>[web2] run: pip install -r requirements.txt
</span><span class='line'>[web2] out: Requirement already satisfied (use --upgrade to upgrade): Beaker==1.6.3 in /home/deploy/env-mox/lib/python2.7/site-packages (from -r requirements.txt (line 1))
</span><span class='line'>
</span><span class='line'>[web2] out: Cleaning up...
</span><span class='line'>
</span><span class='line'>[web2] run: supervisorctl restart web1
</span><span class='line'>[web2] out: web1: stopped
</span><span class='line'>[web2] out: web1: started
</span><span class='line'>
</span><span class='line'>[web2] run: supervisorctl restart web2
</span><span class='line'>[web2] out: web2: stopped
</span><span class='line'>[web2] out: web2: started
</span><span class='line'>
</span><span class='line'>[localhost] local: grep 'rollbar.access_token' production.ini | sed 's/^.* = //g'
</span><span class='line'>[localhost] local: whoami
</span><span class='line'>[localhost] local: git log -n 1 --pretty=format:"%H"
</span><span class='line'>Deploy recorded successfully. Deploy id: 309
</span><span class='line'>
</span><span class='line'>Done.
</span><span class='line'>Disconnecting from web2... done.
</span><span class='line'>Disconnecting from web1... done.</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s more like it. Since <code>env.hosts</code> is not set, the undecorated tasks just run locally (and only once), and the <code>@roles('web')</code>-decorated task runs for each web host.</p>
]]></content>
  </entry>
  
</feed>
